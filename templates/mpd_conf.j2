# vim: set filetype=conf:
#
# ANSIBLE-MANAGED CONFIGURATION FILE
# Ref: https://github.com/MusicPlayerDaemon/MPD/blob/master/doc/mpdconf.example
#

# music directory that MPD will search, catalog, and play from
music_directory "{{ musicpd_music_dir }}"

# user playlists dir
playlist_directory "{{ musicpd_user_playlists_dir }}"

# MPD user music database file path
db_file "{{ musicpd_user_music_db_file_path }}"

# log MPD status and events to musicpd_user_log_file_path
# logging_level is 'notice', 'info', 'verbose', 'warning' or 'error'
{{ ('log_file "' + musicpd_user_log_file_path + '"') if musicpd_enable_logging else '# ...do not log' }}
log_level "{{ musicpd_logging_level }}"

# MPD user Process ID file path (used for mpd --kill and some init scripts)
{{ '# ...do not use PID file with systemd' if (ansible_system == "Linux") else ('pid_file "' + musicpd_user_pid_file_path + '"') }}

# MPD user state file path (to start MPD with last saved state)
state_file "{{ musicpd_user_state_file_path }}"

# MPD user sticker DB file path (to manage dynamic info attached to songs)
sticker_file "{{ musicpd_user_sticker_db_file_path }}"

# make MPD run as this user and group (i.e. change its user/group ID on init)
user "{{ musicpd_run_as_user }}"
group "{{ musicpd_run_as_group }}"

# on startup, immediately start playback
restore_paused "{{ 'no' if musicpd_start_playback_on_startup else 'yes' }}"

# save playlists with absolute paths usable by other music players
save_absolute_paths_in_playlists "{{ 'yes' if musicpd_save_absolute_paths_for_playlists else 'no' }}"

# tag types to extract during audio file discovery process
# see https://mpd.readthedocs.io/en/latest/protocol.html#tags
metadata_to_use "{{ musicpd_track_tag_list }}"

# detect changes in music_directory and automatically update the MPD music DB
auto_update "{{ 'yes' if musicpd_update_db_on_filesystem_changes else 'no' }}"

# publish service info with zeroconf/avahi
zeroconf_enabled "{{ 'yes' if musicpd_publish_service_with_avahi else 'no' }}"
# set published avahi server name (%h expands to hostname)
zeroconf_name "{{ musicpd_avahi_mpd_server_name }}"

# SOUND INPUT ##################################################################

input {
  plugin "curl"
}

# SOUND OUTPUT #################################################################
        #
        ###############################################################################

        # Audio Output ################################################################
        #
        # MPD supports various audio output types, as well as playing through multiple
        # audio outputs at the same time, through multiple audio_output settings
        # blocks. Setting this block is optional, though the server will only attempt
        # autodetection for one sound card.
        #
        # An example of an ALSA output:
        #
        #audio_output {
        # type    "alsa"
        # name    "My ALSA Device"
        ##  device    "hw:0,0"  # optional
        ##  mixer_type      "hardware"  # optional
        ##  mixer_device  "default" # optional
        ##  mixer_control "PCM"   # optional
        ##  mixer_index "0"   # optional
        #}
        #
        # An example of an OSS output:
        #
        #audio_output {
        # type    "oss"
        # name    "My OSS Device"
        ##  device    "/dev/dsp"  # optional
        ##  mixer_type      "hardware"  # optional
        ##  mixer_device  "/dev/mixer"  # optional
        ##  mixer_control "PCM"   # optional
        #}
        #
        # An example of a shout output (for streaming to Icecast):
        #
        #audio_output {
        # type    "shout"
        # encoder   "vorbis"    # optional
        # name    "My Shout Stream"
        # host    "localhost"
        # port    "8000"
        # mount   "/mpd.ogg"
        # password  "hackme"
        # quality   "5.0"
        # bitrate   "128"
        # format    "44100:16:1"
        ##  protocol  "icecast2"    # optional
        ##  user    "source"    # optional
        ##  description "My Stream Description" # optional
        ##  url   "http://example.com"  # optional
        ##  genre   "jazz"      # optional
        ##  public    "no"      # optional
        ##  timeout   "2"     # optional
        ##  mixer_type      "software"    # optional
        #}
        #
        # An example of a recorder output:
        #
        #audio_output {
        # type    "recorder"
        # name    "My recorder"
        # encoder   "vorbis"    # optional, vorbis or lame
        # path    "/var/lib/mpd/recorder/mpd.ogg"
        ##  quality   "5.0"     # do not define if bitrate is defined
        # bitrate   "128"     # do not define if quality is defined
        # format    "44100:16:1"
        #}
        #
        # An example of a httpd output (built-in HTTP streaming server):
        #
        #audio_output {
        # type    "httpd"
        # name    "My HTTP Stream"
        # encoder   "vorbis"    # optional, vorbis or lame
        # port    "8000"
        # bind_to_address "0.0.0.0"   # optional, IPv4 or IPv6
        ##  quality   "5.0"     # do not define if bitrate is defined
        # bitrate   "128"     # do not define if quality is defined
        # format    "44100:16:1"
        # max_clients "0"     # optional 0=no limit
        #}
        #
        # An example of a pulseaudio output (streaming to a remote pulseaudio server)
        #
        #audio_output {
        # type    "pulse"
        # name    "My Pulse Output"
        ##  server    "remote_server"   # optional
        ##  sink    "remote_server_sink"  # optional
        ##  media_role  "media_role"    #optional
        #}
        #
        # An example of a winmm output (Windows multimedia API).
        #
        #audio_output {
        # type    "winmm"
        # name    "My WinMM output"
        ##  device    "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
        #   or
        ##  device    "0"   # optional
        ##  mixer_type  "hardware"  # optional
        #}
        #
        # An example of a wasapi output (Windows multimedia API).
        #
        #audio_output {
        # type    "wasapi"
        # name    "My WASAPI output"
        ##  device    "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
        #   or
        ##  device    "0"   # optional
        ##  mixer_type  "hardware"  # optional
        ## Exclusive mode blocks all other audio source, and get best audio quality without resampling.
        ##  exclusive "no"    # optional
        ## Enumerate all devices in log.
        ##  enumerate "no"    # optional
        #}
        #
        # An example of an openal output.
        #
        #audio_output {
        # type    "openal"
        # name    "My OpenAL output"
        ##  device    "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
        #}
        #
        # An example of an sndio output.
        #
        #audio_output {
        # type    "sndio"
        # name    "sndio output"
        # mixer_type  "hardware"
        #}
        #
        # An example of an OS X output:
        #
        #audio_output {
        # type    "osx"
        # name    "My OS X Device"
        ##  device    "Built-in Output" # optional
        ##  channel_map      "-1,-1,0,1"  # optional
        #}
        #
        ## Example "pipe" output:
        #
        #audio_output {
        # type    "pipe"
        # name    "my pipe"
        # command   "aplay -f cd 2>/dev/null"
        ## Or if you're want to use AudioCompress
        # command   "AudioCompress -m | aplay -f cd 2>/dev/null"
        ## Or to send raw PCM stream through PCM:
        # command   "nc example.org 8765"
        # format    "44100:16:2"
        #}
        #
        ## An example of a null output (for no audio output):
        #
        #audio_output {
        # type    "null"
        # name    "My Null Output"
        # mixer_type      "none"      # optional
        #}
        #
        ###############################################################################


        # Normalization automatic volume adjustments ##################################
        #
        # This setting specifies the type of ReplayGain to use. This setting can have
        # the argument "off", "album", "track" or "auto". "auto" is a special mode that
        # chooses between "track" and "album" depending on the current state of
        # random playback. If random playback is enabled then "track" mode is used.
        # See <https://wiki.hydrogenaud.io/index.php?title=Replaygain> for
        # more details about ReplayGain.
        # This setting is off by default.
        #
        #replaygain     "album"
        #
        # This setting sets the pre-amp used for files that have ReplayGain tags. By
        # default this setting is disabled.
        #
        #replaygain_preamp    "0"
        #
        # This setting sets the pre-amp used for files that do NOT have ReplayGain tags.
        # By default this setting is disabled.
        #
        #replaygain_missing_preamp  "0"
        #
        # This setting enables or disables ReplayGain limiting.
        # MPD calculates actual amplification based on the ReplayGain tags
        # and replaygain_preamp / replaygain_missing_preamp setting.
        # If replaygain_limit is enabled MPD will never amplify audio signal
        # above its original level. If replaygain_limit is disabled such amplification
        # might occur. By default this setting is enabled.
        #
        #replaygain_limit   "yes"
        #
        # This setting enables on-the-fly normalization volume adjustment. This will
        # result in the volume of all playing audio to be adjusted so the output has
        # equal "loudness". This setting is disabled by default.
        #
        #volume_normalization   "no"
        #
        ###############################################################################

        # Character Encoding ##########################################################
        #
        # If file or directory names do not display correctly for your locale then you
        # may need to modify this setting.
        #
        #filesystem_charset   "UTF-8"
        #
        ###############################################################################
